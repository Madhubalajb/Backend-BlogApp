{"version":3,"sources":["components/LoginForm.js","components/SignUpForm.js","components/BlogForm.js","components/Togglable.js","components/ShowBlogs.js","services/login.js","services/signup.js","services/blog.js","App.js","serviceWorker.js","index.js"],"names":["LoginForm","props","onSubmit","login","type","placeholder","onChange","u_name","required","u_password","SignUpForm","addUser","name","BlogForm","blog","title","author","url","Togglable","React","forwardRef","ref","useState","visible","setVisible","hideWhenVisible","display","showWhenVisible","toggleVisibility","useImperativeHandle","style","onClick","buttonLabel","children","ShowBlogs","blogs","map","credentials","a","async","axios","post","response","data","token","newToken","get","config","headers","Authorization","App","setName","username","setUsername","password","setPassword","user","setUser","setTitle","setAuthor","setUrl","setBlogs","message","setMessage","loginFormRef","createRef","signupFormRef","blogFormRef","useEffect","blogService","then","loggedUserJSON","window","localStorage","getItem","JSON","parse","showMessage","setTimeout","handleUsername","event","target","value","handlePassword","preventDefault","loginService","setItem","stringify","console","log","removeItem","current","concat","signupService","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.902f15b1.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst LoginForm = (props) => {\r\n    return (\r\n        <div>\r\n            <h1>Login</h1>\r\n            <form onSubmit={props.login} >\r\n                <input type=\"text\" placeholder=\"Username\" onChange={props.u_name} required/>\r\n                <input type=\"password\" placeholder=\"Password\" onChange={props.u_password} required/>\r\n                <button type=\"submit\">Login</button>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default LoginForm","import React from 'react'\r\n\r\nconst SignUpForm = (props) => {\r\n    return (\r\n        <div>\r\n            <h1>Sign Up</h1>\r\n            <form onSubmit={props.addUser}>\r\n                <input type=\"text\" placeholder=\"Name\" onChange={props.name} />\r\n                <input type=\"text\" placeholder=\"Username\" onChange={props.u_name} />\r\n                <input type=\"password\" placeholder=\"Set Password\" onChange={props.u_password} />\r\n                <button type=\"submit\">Sign Up</button>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SignUpForm","import React from 'react'\r\n\r\nconst BlogForm = (props) => {\r\n    return (\r\n        <div>\r\n            <h1>Create new</h1>\r\n            <form onSubmit={props.blog}>\r\n                <input type=\"text\" placeholder=\"Title\" onChange={props.title} required/>\r\n                <input type=\"text\" placeholder=\"Author\" onChange={props.author} required/>\r\n                <input type=\"text\" placeholder=\"url\" onChange={props.url} required/>\r\n                <button type=\"submit\">Create</button>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default BlogForm","import React, { useState, useImperativeHandle } from 'react'\r\n\r\nconst Togglable = React.forwardRef((props, ref) => {\r\n    const [visible, setVisible] = useState(false)\r\n\r\n    const hideWhenVisible = { display: visible ? 'none' : '' } // display: ''  initially\r\n    const showWhenVisible = { display: visible ? '' : 'none' } // display: 'none'  initially\r\n\r\n    const toggleVisibility = () => {\r\n        setVisible(!visible)\r\n    }\r\n\r\n    useImperativeHandle(ref, () => {\r\n        return {\r\n            toggleVisibility\r\n        }\r\n    })\r\n\r\n    return (\r\n        <div>\r\n            <div style={hideWhenVisible}>\r\n                <button onClick={toggleVisibility}>{props.buttonLabel}</button>\r\n            </div>\r\n            <div style={showWhenVisible}>\r\n                {props.children}\r\n                <button onClick={toggleVisibility}>cancel</button>\r\n            </div>\r\n        </div>\r\n    )\r\n})\r\n\r\nexport default Togglable","import React from 'react'\r\n\r\nconst ShowBlogs = (props) => {\r\n    const blogs = props.blogs\r\n    const showBlog = () => {\r\n        blogs.map(blog => <p>{blog.title}</p>)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {showBlog()}\r\n        </div>\r\n    )\r\n        \r\n}\r\n\r\nexport default ShowBlogs","import axios from 'axios'\r\nconst url = 'api/login'\r\n\r\nconst login = async (credentials) => {\r\n    const response = await axios.post(url, credentials)\r\n    return response.data\r\n}\r\n\r\nexport default { login }","import axios from 'axios'\r\nconst url = 'api/users'\r\n\r\nconst signup = async (credentials) => {\r\n    const response = await axios.post(url, credentials)\r\n    return response.data\r\n}\r\n\r\nexport default { signup }","import axios from 'axios'\r\nconst url = 'api/blogs'\r\n\r\nlet token = null\r\n\r\nconst setToken = newToken => {\r\n    token = `bearer ${newToken}`\r\n}\r\n\r\nconst getData = async () => {\r\n    const response = await axios.get(url)\r\n    return response.data\r\n}\r\n\r\nconst postData = async (blog) => {\r\n    const config = {\r\n        headers: { Authorization : token },\r\n    }\r\n    const response = await axios.post(url, blog, config)\r\n    return response.data\r\n}\r\n\r\nconst updateData = async (id, blog) => {\r\n    const response = await axios.put(`${url}${id}`, blog)\r\n    return response.data\r\n}\r\n\r\nconst deleteData = async (id, blog) => {\r\n    const response = await axios.delete(`${url}/${id}`, blog)\r\n    return response.data\r\n}\r\n\r\nexport default { setToken, getData, postData, updateData, deleteData }","import React, {useState, useEffect} from 'react'\nimport LoginForm from './components/LoginForm'\nimport SignUpForm from './components/SignUpForm'\nimport BlogForm from './components/BlogForm'\nimport Togglable from './components/Togglable'\nimport ShowBlogs from './components/ShowBlogs'\n\nimport loginService from './services/login'\nimport signupService from './services/signup'\nimport blogService from './services/blog'\n\nconst App = () => {\n    const [name, setName] = useState('')\n    const [username, setUsername] = useState('')\n    const [password, setPassword] = useState('')\n    const [user, setUser] = useState('')\n    const [title, setTitle] = useState('')\n    const [author, setAuthor] = useState('')\n    const [url, setUrl] = useState('')\n    const [blogs, setBlogs] = useState([])\n    const [message, setMessage] = useState('')\n    const [visible, setVisible] = useState(false)\n\n    const loginFormRef = React.createRef()\n    const signupFormRef = React.createRef()\n    const blogFormRef = React.createRef()\n\n    useEffect(() => {\n        blogService.getData().then(blogs => setBlogs(blogs))\n    }, [])\n\n    useEffect(() => {\n        const loggedUserJSON = window.localStorage.getItem('loggedBlogAppUser') \n        if(loggedUserJSON) {\n            const user = JSON.parse(loggedUserJSON)\n            setUser(user)\n            blogService.setToken(user.token)\n        }\n    }, [])\n\n    const showMessage = (message) => {\n        setMessage(message)\n        setTimeout(() => {\n            setMessage('')\n        }, 5000)\n    }\n\n    const handleLogin = async (event) => {\n        event.preventDefault()\n        try {\n            const user = await loginService.login({\n                username, password\n            })\n            window.localStorage.setItem('loggedBlogAppUser', JSON.stringify(user))\n            blogService.setToken(user.token)\n            setUser(user)\n            setUsername('')\n            setPassword('')\n        }\n        catch (exception){\n            console.log(exception)\n        }\n    }\n\n    const addUser = async (event) => {\n        event.preventDefault()\n        signupFormRef.current.toggleVisibility()\n        try {\n            const addedUser = await signupService.signup({\n                name, username, password\n            })\n            showMessage('User created :)')\n            setName('')\n            setUsername('')\n            setPassword('')\n        } \n        catch (exception) {\n            console.log(exception)\n        }\n    }\n\n    const createBlog = async (event) => {\n        event.preventDefault()\n        blogFormRef.current.toggleVisibility()\n        try {\n            const blog = await blogService.postData({\n                title, author, url\n            })\n            setBlogs(blogs.concat(blog))\n            showMessage('Blog created :)')\n            setTitle('')\n            setAuthor('')\n            setUrl('')\n        }\n        catch (exception) {\n            console.log(exception)\n        }\n    }\n\n    const logoutUser = () => {\n        setUser('')\n        window.localStorage.removeItem('loggedBlogAppUser')\n        blogService.setToken('')\n    }\n\n    const handleName = (event) => setName(event.target.value)\n    const handleUsername = (event) => setUsername(event.target.value)\n    const handlePassword = (event) => setPassword(event.target.value)\n    const handleTitle = (event) => setTitle(event.target.value)\n    const handleAuthor = (event) => setAuthor(event.target.value)\n    const handleUrl = (event)=> setUrl(event.target.value)\n    \n    if(user === '') {\n        return (\n            <Togglable buttonLabel='Login' ref={loginFormRef}>\n                <LoginForm login={handleLogin} u_name={handleUsername} u_password={handlePassword} /> \n            </Togglable>\n        )\n    }\n    return (\n        <div>\n            {message}\n            <p>{user.name} logged in</p><button onClick={logoutUser}>logout</button>\n\n            <Togglable buttonLabel='Create new' ref={blogFormRef}>\n                <BlogForm blog={createBlog} title={handleTitle} author={handleAuthor} url={handleUrl} />\n            </Togglable>\n            \n            <Togglable buttonLabel='SignUp' ref={signupFormRef}>\n                <SignUpForm addUser={addUser} name={handleName} u_name={handleUsername} u_password={handlePassword} />\n            </Togglable>\n\n            <h1>Blogs</h1>\n            <ShowBlogs blog={blogs} />\n        </div>\n    )\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}