{"version":3,"sources":["components/LoginForm.js","components/SignUpForm.js","components/BlogForm.js","services/login.js","services/signup.js","services/blog.js","App.js","serviceWorker.js","index.js"],"names":["LoginForm","props","onSubmit","login","type","placeholder","onChange","u_name","required","u_password","SignUpForm","addUser","name","BlogForm","blog","title","author","url","credentials","a","async","axios","post","response","data","token","newToken","get","config","headers","Authorization","App","useState","setName","username","setUsername","password","setPassword","user","setUser","setTitle","setAuthor","setUrl","blogs","setBlogs","message","setMessage","useEffect","blogService","then","loggedUserJSON","window","localStorage","getItem","JSON","parse","showMessage","setTimeout","handleUsername","event","target","value","handlePassword","preventDefault","loginService","setItem","stringify","console","log","onClick","removeItem","concat","signupService","addedUser","map","showBlogs","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"kNAeeA,EAbG,SAACC,GACf,OACI,6BACI,qCACA,0BAAMC,SAAUD,EAAME,OAClB,2BAAOC,KAAK,OAAOC,YAAY,WAAWC,SAAUL,EAAMM,OAAQC,UAAQ,IAC1E,2BAAOJ,KAAK,WAAWC,YAAY,WAAWC,SAAUL,EAAMQ,WAAYD,UAAQ,IAClF,4BAAQJ,KAAK,UAAb,YCODM,EAdI,SAACT,GAChB,OACI,6BACI,uCACA,0BAAMC,SAAUD,EAAMU,SAClB,2BAAOP,KAAK,OAAOC,YAAY,OAAOC,SAAUL,EAAMW,OACtD,2BAAOR,KAAK,OAAOC,YAAY,WAAWC,SAAUL,EAAMM,SAC1D,2BAAOH,KAAK,WAAWC,YAAY,eAAeC,SAAUL,EAAMQ,aAClE,4BAAQL,KAAK,UAAb,cCMDS,EAdE,SAACZ,GACd,OACI,6BACI,0CACA,0BAAMC,SAAUD,EAAMa,MAClB,2BAAOV,KAAK,OAAOC,YAAY,QAAQC,SAAUL,EAAMc,MAAOP,UAAQ,IACtE,2BAAOJ,KAAK,OAAOC,YAAY,SAASC,SAAUL,EAAMe,OAAQR,UAAQ,IACxE,2BAAOJ,KAAK,OAAOC,YAAY,MAAMC,SAAUL,EAAMgB,IAAKT,UAAQ,IAClE,4BAAQJ,KAAK,UAAb,a,gBCFD,EALD,SAAOc,GAAP,eAAAC,EAAAC,OAAA,kEAAAD,EAAA,MACaE,IAAMC,KAHrB,YAG+BJ,IAD7B,cACJK,EADI,yBAEHA,EAASC,MAFN,sCCKC,EALA,SAAON,GAAP,eAAAC,EAAAC,OAAA,kEAAAD,EAAA,MACYE,IAAMC,KAHrB,YAG+BJ,IAD5B,cACLK,EADK,yBAEJA,EAASC,MAFL,sCCAXC,EAAQ,KA6BG,EA3BE,SAAAC,GACbD,EAAK,iBAAaC,IA0BP,EAvBC,0BAAAP,EAAAC,OAAA,kEAAAD,EAAA,MACWE,IAAMM,IATrB,cAQI,cACNJ,EADM,yBAELA,EAASC,MAFJ,sCAuBD,EAlBE,SAAOV,GAAP,iBAAAK,EAAAC,OAAA,uDACPQ,EAAS,CACXC,QAAS,CAAEC,cAAgBL,IAFlB,WAAAN,EAAA,MAIUE,IAAMC,KAjBrB,YAiB+BR,EAAMc,IAJhC,cAIPL,EAJO,yBAKNA,EAASC,MALH,sCCgHFO,EAtHH,WAAO,IAAD,EACUC,mBAAS,IADnB,mBACPpB,EADO,KACDqB,EADC,OAEkBD,mBAAS,IAF3B,mBAEPE,EAFO,KAEGC,EAFH,OAGkBH,mBAAS,IAH3B,mBAGPI,EAHO,KAGGC,EAHH,OAIUL,mBAAS,IAJnB,mBAIPM,EAJO,KAIDC,EAJC,OAKYP,mBAAS,IALrB,mBAKPjB,EALO,KAKAyB,EALA,OAMcR,mBAAS,IANvB,mBAMPhB,EANO,KAMCyB,EAND,OAOQT,mBAAS,IAPjB,mBAOPf,EAPO,KAOFyB,EAPE,OAQYV,mBAAS,IARrB,mBAQPW,EARO,KAQAC,EARA,OASgBZ,mBAAS,IATzB,mBASPa,EATO,KASEC,EATF,KAWdC,qBAAU,WACNC,IAAsBC,MAAK,SAAAN,GAAK,OAAIC,EAASD,QAC9C,IAEHI,qBAAU,WACN,IAAMG,EAAiBC,OAAOC,aAAaC,QAAQ,qBACnD,GAAGH,EAAgB,CACf,IAAMZ,EAAOgB,KAAKC,MAAML,GACxBX,EAAQD,GACRU,EAAqBV,EAAKb,UAE/B,IAEH,IAAM+B,EAAc,SAACX,GACjBC,EAAWD,GACXY,YAAW,WACPX,EAAW,MACZ,MAgEDY,EAAiB,SAACC,GAAD,OAAWxB,EAAYwB,EAAMC,OAAOC,QACrDC,EAAiB,SAACH,GAAD,OAAWtB,EAAYsB,EAAMC,OAAOC,QAK3D,MAAY,KAATvB,EAEK,kBAAC,EAAD,CAAWnC,MArEC,SAAOwD,GAAP,eAAAxC,EAAAC,OAAA,uDAChBuC,EAAMI,iBADU,oBAAA5C,EAAA,MAGO6C,EAAmB,CAClC9B,WAAUE,cAJF,OAGNE,EAHM,OAMZa,OAAOC,aAAaa,QAAQ,oBAAqBX,KAAKY,UAAU5B,IAChEU,EAAqBV,EAAKb,OAC1Bc,EAAQD,GACRH,EAAY,IACZE,EAAY,IAVA,kDAaZ8B,QAAQC,IAAR,MAbY,0DAqEmB7D,OAAQmD,EAAgBjD,WAAYqD,IAIvE,6BACKjB,EACD,2BAAIP,EAAK1B,KAAT,cAA4B,4BAAQyD,QArBzB,WACf9B,EAAQ,IACRY,OAAOC,aAAakB,WAAW,qBAC/BtB,EAAqB,MAkBW,UAE5B,kBAAC,EAAD,CAAUlC,KA1CC,SAAO6C,GAAP,eAAAxC,EAAAC,OAAA,uDACfuC,EAAMI,iBADS,oBAAA5C,EAAA,MAGQ6B,EAAqB,CACpCjC,QAAOC,SAAQC,SAJR,OAGLH,EAHK,OAMX8B,EAASD,EAAM4B,OAAOzD,IACtB0C,EAAY,mBACZhB,EAAS,IACTC,EAAU,IACVC,EAAO,IAVI,kDAaXyB,QAAQC,IAAR,MAbW,0DA0CiBrD,MAdhB,SAAC4C,GAAD,OAAWnB,EAASmB,EAAMC,OAAOC,QAcG7C,OAbnC,SAAC2C,GAAD,OAAWlB,EAAUkB,EAAMC,OAAOC,QAauB5C,IAZ5D,SAAC0C,GAAD,OAAUjB,EAAOiB,EAAMC,OAAOC,UAcxC,kBAAC,EAAD,CAAYlD,QA9DJ,SAAOgD,GAAP,eAAAxC,EAAAC,OAAA,uDACZuC,EAAMI,iBADM,oBAAA5C,EAAA,MAGgBqD,EAAqB,CACzC5D,OAAMsB,WAAUE,cAJZ,OAGFqC,EAHE,OAMRtB,OAAOC,aAAaa,QAAQ,oBAAqBX,KAAKY,UAAUO,IAChEzB,EAAqBV,EAAKb,OAC1B+B,EAAY,mBACZvB,EAAQ,IACRE,EAAY,IACZE,EAAY,IAXJ,kDAcR8B,QAAQC,IAAR,MAdQ,0DA8DsBxD,KAnBnB,SAAC+C,GAAD,OAAW1B,EAAQ0B,EAAMC,OAAOC,QAmBKtD,OAAQmD,EAAgBjD,WAAYqD,IAEpF,qCA7BU,SAACnB,GAAD,OAAWA,EAAM+B,KAAI,SAAA5D,GAAI,OAAI,2BAAIA,EAAKC,UA8B/C4D,CAAUhC,KC7GHiC,QACW,cAA7BzB,OAAO0B,SAASC,UAEe,UAA7B3B,OAAO0B,SAASC,UAEhB3B,OAAO0B,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD8H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMrC,MAAK,SAAAsC,GACjCA,EAAaC,kB","file":"static/js/main.98c77664.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst LoginForm = (props) => {\r\n    return (\r\n        <div>\r\n            <h1>Login</h1>\r\n            <form onSubmit={props.login} >\r\n                <input type=\"text\" placeholder=\"Username\" onChange={props.u_name} required/>\r\n                <input type=\"password\" placeholder=\"Password\" onChange={props.u_password} required/>\r\n                <button type=\"submit\">Login</button>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default LoginForm","import React from 'react'\r\n\r\nconst SignUpForm = (props) => {\r\n    return (\r\n        <div>\r\n            <h1>Sign Up</h1>\r\n            <form onSubmit={props.addUser}>\r\n                <input type=\"text\" placeholder=\"Name\" onChange={props.name} />\r\n                <input type=\"text\" placeholder=\"Username\" onChange={props.u_name} />\r\n                <input type=\"password\" placeholder=\"Set Password\" onChange={props.u_password} />\r\n                <button type=\"submit\">Sign Up</button>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SignUpForm","import React from 'react'\r\n\r\nconst BlogForm = (props) => {\r\n    return (\r\n        <div>\r\n            <h1>Create new</h1>\r\n            <form onSubmit={props.blog}>\r\n                <input type=\"text\" placeholder=\"Title\" onChange={props.title} required/>\r\n                <input type=\"text\" placeholder=\"Author\" onChange={props.author} required/>\r\n                <input type=\"text\" placeholder=\"url\" onChange={props.url} required/>\r\n                <button type=\"submit\">Create</button>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default BlogForm","import axios from 'axios'\r\nconst url = 'api/login'\r\n\r\nconst login = async (credentials) => {\r\n    const response = await axios.post(url, credentials)\r\n    return response.data\r\n}\r\n\r\nexport default { login }","import axios from 'axios'\r\nconst url = 'api/users'\r\n\r\nconst signup = async (credentials) => {\r\n    const response = await axios.post(url, credentials)\r\n    return response.data\r\n}\r\n\r\nexport default { signup }","import axios from 'axios'\r\nconst url = 'api/blogs'\r\n\r\nlet token = null\r\n\r\nconst setToken = newToken => {\r\n    token = `bearer ${newToken}`\r\n}\r\n\r\nconst getData = async () => {\r\n    const response = await axios.get(url)\r\n    return response.data\r\n}\r\n\r\nconst postData = async (blog) => {\r\n    const config = {\r\n        headers: { Authorization : token },\r\n    }\r\n    const response = await axios.post(url, blog, config)\r\n    return response.data\r\n}\r\n\r\nconst updateData = async (id, blog) => {\r\n    const response = await axios.put(`${url}${id}`, blog)\r\n    return response.data\r\n}\r\n\r\nconst deleteData = async (id, blog) => {\r\n    const response = await axios.delete(`${url}/${id}`, blog)\r\n    return response.data\r\n}\r\n\r\nexport default { setToken, getData, postData, updateData, deleteData }","import React, {useState, useEffect} from 'react'\nimport LoginForm from './components/LoginForm'\nimport SignUpForm from './components/SignUpForm'\nimport BlogForm from './components/BlogForm'\nimport loginService from './services/login'\nimport signupService from './services/signup'\nimport blogService from './services/blog'\n\nconst App = () => {\n    const [name, setName] = useState('')\n    const [username, setUsername] = useState('')\n    const [password, setPassword] = useState('')\n    const [user, setUser] = useState('')\n    const [title, setTitle] = useState('')\n    const [author, setAuthor] = useState('')\n    const [url, setUrl] = useState('')\n    const [blogs, setBlogs] = useState([])\n    const [message, setMessage] = useState('')\n\n    useEffect(() => {\n        blogService.getData().then(blogs => setBlogs(blogs))\n    }, [])\n\n    useEffect(() => {\n        const loggedUserJSON = window.localStorage.getItem('loggedBlogAppUser') \n        if(loggedUserJSON) {\n            const user = JSON.parse(loggedUserJSON)\n            setUser(user)\n            blogService.setToken(user.token)\n        }\n    }, [])\n\n    const showMessage = (message) => {\n        setMessage(message)\n        setTimeout(() => {\n            setMessage('')\n        }, 5000)\n    }\n\n    const handleLogin = async (event) => {\n        event.preventDefault()\n        try {\n            const user = await loginService.login({\n                username, password\n            })\n            window.localStorage.setItem('loggedBlogAppUser', JSON.stringify(user))\n            blogService.setToken(user.token)\n            setUser(user)\n            setUsername('')\n            setPassword('')\n        }\n        catch (exception){\n            console.log(exception)\n        }\n    }\n\n    const addUser = async (event) => {\n        event.preventDefault()\n        try {\n            const addedUser = await signupService.signup({\n                name, username, password\n            })\n            window.localStorage.setItem('loggedBlogAppUser', JSON.stringify(addedUser))\n            blogService.setToken(user.token)\n            showMessage('User created :)')\n            setName('')\n            setUsername('')\n            setPassword('')\n        } \n        catch (exception) {\n            console.log(exception)\n        }\n    }\n\n    const createBlog = async (event) => {\n        event.preventDefault()\n        try {\n            const blog = await blogService.postData({\n                title, author, url\n            })\n            setBlogs(blogs.concat(blog))\n            showMessage('Blog created :)')\n            setTitle('')\n            setAuthor('')\n            setUrl('')\n        }\n        catch (exception) {\n            console.log(exception)\n        }\n    }\n\n    const showBlogs = (blogs) => blogs.map(blog => <p>{blog.title}</p>)\n\n    const logoutUser = () => {\n        setUser('')\n        window.localStorage.removeItem('loggedBlogAppUser')\n        blogService.setToken('')\n    }\n\n    const handleName = (event) => setName(event.target.value)\n    const handleUsername = (event) => setUsername(event.target.value)\n    const handlePassword = (event) => setPassword(event.target.value)\n    const handleTitle = (event) => setTitle(event.target.value)\n    const handleAuthor = (event) => setAuthor(event.target.value)\n    const handleUrl = (event)=> setUrl(event.target.value)\n    \n    if(user === '') {\n        return (\n            <LoginForm login={handleLogin} u_name={handleUsername} u_password={handlePassword} /> \n        )\n    }\n    return (\n        <div>\n            {message}\n            <p>{user.name} logged in</p><button onClick={logoutUser}>logout</button>\n\n            <BlogForm blog={createBlog} title={handleTitle} author={handleAuthor} url={handleUrl} />\n\n            <SignUpForm addUser={addUser} name={handleName} u_name={handleUsername} u_password={handlePassword} />\n\n            <h1>Blogs</h1>\n            {showBlogs(blogs)}\n        </div>\n    )\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}